{{- /*
This file was autogenerated by helmify-kustomize
DO NOT EDIT: Any changes will be overwritten
*/ -}}
{{- define "hlmfk-1-2.getValue" -}}
{{- $current := .Values -}}
{{- $found := true -}}
{{- range $segment := .path -}}
  {{- if and $found $current -}}
    {{- if kindIs "map" $current -}}
      {{- if hasKey $current $segment -}}
        {{- $current = index $current $segment -}}
      {{- else -}}
        {{- $found = false -}}
      {{- end -}}
    {{- else if kindIs "slice" $current -}}
      {{- $index := int $segment -}}
      {{- if and (ge $index 0) (lt $index (len $current)) -}}
        {{- $current = index $current $index -}}
      {{- else -}}
        {{- $found = false -}}
      {{- end -}}
    {{- else -}}
      {{- $found = false -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
{{- if $found -}}
  {{- if or (kindIs "map" $current) (kindIs "slice" $current) -}}
    {{- toYaml $current -}}
  {{- else -}}
    {{- $current -}}
  {{- end -}}
{{- else -}}
  {{- .default -}}
{{- end -}}
{{- end -}}

{{- define "hlmfk-1-2.pickFirstNonEmpty" -}}
{{- $first := index . 0 -}}
{{- $second := index . 1 -}}
{{- if $first }}
  {{- $first }}
{{- else }}
  {{- $second }}
{{- end }}
{{- end }}

{{- define "hlmfk-1-2.getGlobals" }}
{{- if .Values.helmifyPrefix }}
  {{- index .Values .Values.helmifyPrefix }}
{{- else }}
  {{- .Values.globals }}
{{- end }}
{{- end }}

{{- define "hlmfk-1-2.filterManifests" }}
{{- $filtered := list }}
{{- range $i, $v := .manifests }}
  {{- $name := $v.metadata.folder }}
  {{- if has $name $.Values.kustomizeFiles.printNames }}
    {{- $filtered = append $filtered $v }}
  {{- end }}
{{- end }}
manifests:
{{- toYaml $filtered | nindent 2 }}
{{- end }}


{{- define "hlmfk-1-2.printManifests" }}
{{- range $key, $manifest := .manifests }}
{{ toYaml $manifest.spec}}
---
{{- end }}
{{- end}}

{{- define "hlmfk-1-2.ensureMetadata" }} 
{{- /* gets manifestWarpper */}}
{{- if .manifest.spec.metadata }}
{{- else }}
{{- $n := set .manifest.spec "metadata" dict -}}
{{- end }}
{{- end}}

{{- define "hlmfk-1-2.setNamespace" }} 
{{- if .globals.namespace}}
{{- $n := set .manifest.spec.metadata "namespace" .globals.namespace -}}
{{- end }}
{{- end }}

{{- define "hlmfk-1-2.setNamePrefix" }} 
{{- if .globals.namePrefix}}
{{- if .manifest.spec.metadata.name }}
{{- $n := set .manifest.spec.metadata "name" (print .globals.namePrefix .manifest.spec.metadata.name ) -}}
{{- else }}
{{- $n := set .manifest.spec.metadata "name"  .globals.namePrefix -}}
{{- end }}
{{- end }}
{{- end }}

{{- define "hlmfk-1-2.setNameSuffix" }} 
{{- if .globals.nameSuffix}}
{{- if .manifest.spec.metadata.name }}
{{- $n := set .manifest.spec.metadata "name" (print .manifest.spec.metadata.name .globals.nameSuffix) -}}
{{- else }}
{{- $n := set .manifest.spec.metadata "name"  .globals.nameSuffix -}}
{{- end }}
{{- end }}
{{- end }}

{{- define "hlmfk-1-2.nameReleasePrefix" }} 
{{- if .globals.nameReleasePrefix}}
{{- if .manifest.spec.metadata.name }}
{{- $n := set .manifest.spec.metadata "name" (print .Values.Release.name "-" .manifest.spec.metadata.name) -}}
{{- else }}
{{- $n := set .manifest.spec.metadata "name"  .Values.Release -}}
{{- end }}
{{- end }}
{{- end }}

{{- define "hlmfk-1-2.updateConfigMap" }}
{{- $cmName := .name }}
{{- $patch  := .data }}
{{- $manifest := .manifest }}
{{- if and (eq $manifest.spec.kind "ConfigMap") (eq $manifest.spec.metadata.name $cmName) }}
  {{- if not $manifest.spec.data }}
    {{- $n := set $manifest.spec "data" dict }}
  {{- end }}
  {{- range $k, $v := $patch }}
    {{- $key := printf "%v" $k }}
    {{- $n := set $manifest.spec.data $key (printf "%v" $v) }}
  {{- end }}
{{- end }}
{{- end }}


{{- define "hlmfk-1-2.labels" }} 
{{- if .globals.labels}}
{{- if .manifest.spec.metadata.labels }}
{{- else }}
{{- $n := set .manifest.spec.metadata "labels" dict -}}
{{- end }}
{{- $n := merge .manifest.spec.metadata.labels .globals.labels }}
{{- end }}
{{- end }}

{{- define "hlmfk-1-2.annotations" }} 
{{- if .globals.annotations}}
{{- if .manifest.spec.metadata.annotations }}
{{- else }}
{{- $n := set .manifest.spec.metadata "annotations" dict -}}
{{- end }}
{{- $n := merge .manifest.spec.metadata.annotations .globals.annotations }}
{{- end }}
{{- end }}


{{- define "hlmfk-1-2.addStandardHeaders" -}}
{{- if .manifest.spec.metadata.labels }}
{{- else }}
{{- $n := set .manifest.spec.metadata "labels" dict -}}
{{- end }}
{{- if or (not .globals) (not (eq .globals.addStandardHeaders false)) }}
    {{- $n := set .manifest.spec.metadata.labels "helmify-kustomize.local/overlay" .Values.overlay }}
{{- end}}
{{- if or (not .globals) (not (eq .globals.addStandardHeaders false)) }}
    {{- $n := set .manifest.spec.metadata.labels "app.kubernetes.io/name" .Chart.Name }}
    {{- $n := set .manifest.spec.metadata.labels "app.kubernetes.io/instance" .Release.Name }}
    {{- $n := set .manifest.spec.metadata.labels "app.kubernetes.io/version" .Chart.AppVersion  }}
{{- end}}
{{- end -}}

{{- define "hlmfk-1-2.updataImages" }} 
{{- $images := "" }}
{{- if and .globals (hasKey .globals "images") }}
  {{- $images = .globals.images }}
{{- else if .images }}
  {{- $images = .images }}
{{- end }}
{{- if and $images (hasKey .manifest.spec "spec") (hasKey .manifest.spec.spec "template") (hasKey .manifest.spec.spec.template "spec") (hasKey .manifest.spec.spec.template.spec "containers") }}
  {{- range $j, $container := .manifest.spec.spec.template.spec.containers }}
    {{- if hasKey $container "image" }}
      {{- $currentImage := $container.image }}

      {{- range $i, $image := $images }}
      
        {{- if regexMatch (printf "^%s(:.*)?$" $image.image) $currentImage }}
          {{ $newName := include "hlmfk-1-2.image.name"  $container.image }}
          {{- if $image.newName}}
            {{- $newName = $image.newName}}
          {{- end}}
          {{ $newTag := include "hlmfk-1-2.image.tag"  $container.image }}
          {{- if $image.newTag }}
          {{- $newTag = printf ":%s" (print $image.newTag)}}
          {{- end }}
          {{ $newDigest := include "hlmfk-1-2.image.digest"  $container.image }}
          {{- if $image.digest }}
            {{- $newDigest = printf "@%s" (print $image.digest) }}
          {{- end}}
          {{- $newImage := printf "%s%s%s" $newName $newTag $newDigest }}
          {{- $container = set $container "image" $newImage }}
          
          {{- if $image.pullSecrets}}
          {{- $n := set $.manifest.spec.spec.template.spec "imagePullSecrets" $image.pullSecrets}}
          {{- end}}
        {{- end }}
      {{- end }}
      
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}


{{- define "hlmfk-1-2.image.name" -}}
{{- $url := . -}}
{{- $withoutDigest := $url -}}
{{- if contains "@" $url -}}
  {{- $digestParts := split "@" $url -}}
  {{- $withoutDigest = $digestParts._0 -}}
{{- end -}}
{{- if contains ":" $withoutDigest -}}
  {{- $tagParts := split ":" $withoutDigest -}}
  {{- $tagParts._0 -}}
{{- else -}}
  {{- $withoutDigest -}}
{{- end -}}
{{- end -}}

{{- define "hlmfk-1-2.image.tag" -}}
{{- $url := . -}}
{{- $withoutDigest := $url -}}
{{- if contains "@" $url -}}
  {{- $digestParts := split "@" $url -}}
  {{- $withoutDigest = $digestParts._0 -}}
{{- end -}}
{{- $parts := split ":" $withoutDigest -}}
{{- if gt (len $parts) 1 -}}
  {{- $tag := $parts._1 -}}
  :{{- $tag -}}
{{- else -}}
:latest
{{- end -}}
{{- end -}}

{{- define "hlmfk-1-2.image.digest" -}}
{{- $url := . -}}
{{- $parts := split "@" $url -}}
{{- if gt (len $parts) 1 -}}
  {{- $digest := $parts._1 -}}
  @{{- $digest -}}
{{- else -}}
{{- end -}}
{{- end -}}

{{- define "hlmfk-1-2.applyPatches" -}}
{{- $object := .object -}}
{{- $patches := .patches -}}
{{- range $patches -}}
  {{- if eq .op "add" -}}
    {{- $path := .path -}}
    {{- $value := .value -}}
    {{- $pathSegments := splitList "/" (trimPrefix "/" $path) -}}
    {{- $lastIndex := sub (len $pathSegments) 1 -}}
    {{- $lastSegment := index $pathSegments $lastIndex -}}
    
    {{- if eq $lastSegment "-" -}}
      {{- /* Array append operation */ -}}
      {{- $current := $object -}}
      {{- $stopIndex := sub $lastIndex 1 -}}
      {{- range $i, $segment := $pathSegments -}}
        {{- if lt $i $stopIndex -}}
          {{- if $current -}}
            {{- if regexMatch "^[0-9]+$" $segment -}}
              {{- $current = index $current (int $segment) -}}
            {{- else -}}
              {{- if not (hasKey $current $segment) -}}
                {{- $_ := set $current $segment (dict) -}}
              {{- end -}}
              {{- $current = index $current $segment -}}
            {{- end -}}
          {{- end -}}
        {{- end -}}
      {{- end -}}
      {{- $parentSegment := index $pathSegments (sub $lastIndex 1) -}}
      {{- $existingArray := index $current $parentSegment -}}
      {{- if $existingArray -}}
        {{- $_ := set $current $parentSegment (append $existingArray $value) -}}
      {{- else -}}
        {{- $_ := set $current $parentSegment (list $value) -}}
      {{- end -}}
    {{- else -}}
      {{- /* Regular property set operation */ -}}
      {{- if eq (len $pathSegments) 1 -}}
        {{- /* Direct property on root object */ -}}
        {{- if regexMatch "^[0-9]+$" $lastSegment -}}
          {{- $_ := set $object (int $lastSegment) $value -}}
        {{- else -}}
          {{- $_ := set $object $lastSegment $value -}}
        {{- end -}}
      {{- else if eq (len $pathSegments) 2 -}}
        {{- /* One level deep - create intermediate if needed */ -}}
        {{- $firstSegment := index $pathSegments 0 -}}
        {{- if not (hasKey $object $firstSegment) -}}
          {{- $_ := set $object $firstSegment (dict) -}}
        {{- end -}}
        {{- $intermediate := index $object $firstSegment -}}
        {{- if regexMatch "^[0-9]+$" $lastSegment -}}
          {{- $_ := set $intermediate (int $lastSegment) $value -}}
        {{- else -}}
          {{- $_ := set $intermediate $lastSegment $value -}}
        {{- end -}}
      {{- else if eq (len $pathSegments) 3 -}}
        {{- /* Two levels deep - create intermediates if needed */ -}}
        {{- $firstSegment := index $pathSegments 0 -}}
        {{- $secondSegment := index $pathSegments 1 -}}
        {{- if not (hasKey $object $firstSegment) -}}
          {{- $_ := set $object $firstSegment (dict) -}}
        {{- end -}}
        {{- $firstLevel := index $object $firstSegment -}}
        {{- if not (hasKey $firstLevel $secondSegment) -}}
          {{- $_ := set $firstLevel $secondSegment (dict) -}}
        {{- end -}}
        {{- $secondLevel := index $firstLevel $secondSegment -}}
        {{- if regexMatch "^[0-9]+$" $lastSegment -}}
          {{- $_ := set $secondLevel (int $lastSegment) $value -}}
        {{- else -}}
          {{- $_ := set $secondLevel $lastSegment $value -}}
        {{- end -}}
      {{- else -}}
        {{- /* Multi-level deep - build recursively */ -}}
        {{- $current := $object -}}
        {{- range $i, $segment := $pathSegments -}}
          {{- if lt $i $lastIndex -}}
            {{- if $current -}}
              {{- if regexMatch "^[0-9]+$" $segment -}}
                {{- $current = index $current (int $segment) -}}
              {{- else -}}
                {{- if not (hasKey $current $segment) -}}
                  {{- $_ := set $current $segment (dict) -}}
                {{- end -}}
                {{- $current = index $current $segment -}}
              {{- end -}}
            {{- end -}}
          {{- end -}}
        {{- end -}}
        {{- if $current -}}
          {{- if regexMatch "^[0-9]+$" $lastSegment -}}
            {{- $_ := set $current (int $lastSegment) $value -}}
          {{- else -}}
            {{- $_ := set $current $lastSegment $value -}}
          {{- end -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
  {{- else if eq .op "remove" -}}
    {{- $path := .path -}}
    {{- $pathSegments := splitList "/" (trimPrefix "/" $path) -}}
    {{- $current := $object -}}
    {{- $lastIndex := sub (len $pathSegments) 1 -}}
    {{- $lastSegment := index $pathSegments $lastIndex -}}
    
    {{- /* Determine navigation depth based on operation type */ -}}
    {{- $stopIndex := $lastIndex -}}
    {{- if regexMatch "^[0-9]+$" $lastSegment -}}
      {{- /* For array element removal, stop at parent of array */ -}}
      {{- $stopIndex = sub $lastIndex 1 -}}
    {{- end -}}
    
    {{- /* Navigate to the appropriate level */ -}}
    {{- range $i, $segment := $pathSegments -}}
      {{- if lt $i $stopIndex -}}
        {{- /* Check if segment is numeric for array indexing */ -}}
        {{- if regexMatch "^[0-9]+$" $segment -}}
          {{- $current = index $current (int $segment) -}}
        {{- else -}}
          {{- $current = index $current $segment -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
    
    {{- if $current -}}
      {{- if regexMatch "^[0-9]+$" $lastSegment -}}
        {{- /* Remove array element by index */ -}}
        {{- if gt $lastIndex 0 -}}
          {{- $parentSegment := index $pathSegments (sub $lastIndex 1) -}}
          {{- $existingArray := index $current $parentSegment -}}
          {{- if $existingArray -}}
            {{- $removeIndex := int $lastSegment -}}
            {{- $newArray := list -}}
            {{- range $i, $item := $existingArray -}}
              {{- if ne $i $removeIndex -}}
                {{- $newArray = append $newArray $item -}}
              {{- end -}}
            {{- end -}}
            {{- $_ := set $current $parentSegment $newArray -}}
          {{- end -}}
        {{- end -}}
      {{- else -}}
        {{- /* Remove object property */ -}}
        {{- $_ := unset $current $lastSegment -}}
      {{- end -}}
    {{- end -}}
  {{- else if eq .op "replace" -}}
    {{- $path := .path -}}
    {{- $value := .value -}}
    {{- $pathSegments := splitList "/" (trimPrefix "/" $path) -}}
    {{- $current := $object -}}
    {{- $lastIndex := sub (len $pathSegments) 1 -}}
    {{- $lastSegment := index $pathSegments $lastIndex -}}
    
    {{- /* Navigate to the parent of the target location */ -}}
    {{- range $i, $segment := $pathSegments -}}
      {{- if lt $i $lastIndex -}}
        {{- /* Check if segment is numeric for array indexing */ -}}
        {{- if regexMatch "^[0-9]+$" $segment -}}
          {{- $current = index $current (int $segment) -}}
        {{- else -}}
          {{- $current = index $current $segment -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
    
    {{- if $current -}}
      {{- if regexMatch "^[0-9]+$" $lastSegment -}}
        {{- /* Replace array element */ -}}
        {{- $_ := set $current (int $lastSegment) $value -}}
      {{- else -}}
        {{- /* Replace object property */ -}}
        {{- $_ := set $current $lastSegment $value -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
{{- end -}}

{{- /* Enhanced helper function to check if a resource matches a target selector */ -}}
{{- define "hlmfk-1-2.matchesTarget" -}}
{{- $resource := .resource -}}
{{- $target := .target -}}
{{- $match := true -}}

{{- /* Extract resource properties */ -}}
{{- $apiVersion := $resource.apiVersion -}}
{{- $kind := $resource.kind -}}
{{- $name := $resource.metadata.name -}}
{{- $namespace := $resource.metadata.namespace | default "" -}}
{{- $labels := $resource.metadata.labels | default dict -}}
{{- $annotations := $resource.metadata.annotations | default dict -}}

{{- /* Split apiVersion into group and version */ -}}
{{- $group := "" -}}
{{- $version := $apiVersion -}}
{{- if contains "/" $apiVersion -}}
  {{- $parts := splitList "/" $apiVersion -}}
  {{- $group = index $parts 0 -}}
  {{- $version = index $parts 1 -}}
{{- end -}}

{{- /* Check group matching (with wildcard support) */ -}}
{{- if hasKey $target "group" -}}
  {{- if ne $group $target.group -}}
    {{- $match = false -}}
  {{- end -}}
{{- end -}}

{{- /* Check version matching (with wildcard support) */ -}}
{{- if hasKey $target "version" -}}
  {{- if ne $version $target.version -}}
    {{- $match = false -}}
  {{- end -}}
{{- end -}}

{{- /* Check kind matching (with regex support) */ -}}
{{- if hasKey $target "kind" -}}
  {{- $kindPattern := $target.kind -}}
  {{- if not (regexMatch $kindPattern $kind) -}}
    {{- $match = false -}}
  {{- end -}}
{{- end -}}

{{- /* Check name matching (exact or regex support) */ -}}
{{- if hasKey $target "name" -}}
  {{- $namePattern := $target.name -}}
  {{- /* Check if the pattern contains regex special characters */ -}}
  {{- if or (contains "^" $namePattern) (contains "$" $namePattern) (contains ".*" $namePattern) (contains "+" $namePattern) (contains "?" $namePattern) (contains "[" $namePattern) (contains "(" $namePattern) -}}
    {{- /* Use regex matching for patterns */ -}}
    {{- if not (regexMatch $namePattern $name) -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else -}}
    {{- /* Use exact string matching for simple names */ -}}
    {{- if ne $name $namePattern -}}
      {{- $match = false -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- /* Check namespace matching */ -}}
{{- if hasKey $target "namespace" -}}
  {{- if ne $namespace $target.namespace -}}
    {{- $match = false -}}
  {{- end -}}
{{- end -}}

{{- /* Check label selector matching */ -}}
{{- if hasKey $target "labelSelector" -}}
  {{- $labelSelector := $target.labelSelector -}}
  {{- $labelMatch := include "hlmfk-1-2.matchesLabelSelector" (dict "labels" $labels "selector" $labelSelector) -}}
  {{- if ne (trim $labelMatch) "true" -}}
    {{- $match = false -}}
  {{- end -}}
{{- end -}}

{{- /* Check annotation selector matching */ -}}
{{- if hasKey $target "annotationSelector" -}}
  {{- $annotationSelector := $target.annotationSelector -}}
  {{- $annotationMatch := include "hlmfk-1-2.matchesAnnotationSelector" (dict "annotations" $annotations "selector" $annotationSelector) -}}
  {{- if ne (trim $annotationMatch) "true" -}}
    {{- $match = false -}}
  {{- end -}}
{{- end -}}

{{- $match -}}
{{- end -}}

{{- /* Helper function to check label selector matching */ -}}
{{- define "hlmfk-1-2.matchesLabelSelector" -}}
{{- $labels := .labels -}}
{{- $selector := .selector -}}
{{- $match := true -}}

{{- /* Parse selector: "key1=value1,key2 in (value2,value3),key4!=value4,key5" */ -}}
{{- $conditions := splitList "," $selector -}}
{{- range $conditions -}}
  {{- $condition := . | trim -}}
  {{- if contains " in (" $condition -}}
    {{- /* Handle "key in (value1,value2)" */ -}}
    {{- $parts := splitList " in (" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $valuesPart := (index $parts 1) | trimSuffix ")" -}}
    {{- $values := splitList "," $valuesPart -}}
    {{- $labelValue := index $labels $key | default "" -}}
    {{- $found := false -}}
    {{- range $values -}}
      {{- $value := . | trim -}}
      {{- if eq $labelValue $value -}}
        {{- $found = true -}}
      {{- end -}}
    {{- end -}}
    {{- if not $found -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else if contains " notin (" $condition -}}
    {{- /* Handle "key notin (value1,value2)" */ -}}
    {{- $parts := splitList " notin (" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $valuesPart := (index $parts 1) | trimSuffix ")" -}}
    {{- $values := splitList "," $valuesPart -}}
    {{- $labelValue := index $labels $key | default "" -}}
    {{- $found := false -}}
    {{- range $values -}}
      {{- $value := . | trim -}}
      {{- if eq $labelValue $value -}}
        {{- $found = true -}}
      {{- end -}}
    {{- end -}}
    {{- if $found -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else if contains "!=" $condition -}}
    {{- /* Handle "key!=value" */ -}}
    {{- $parts := splitList "!=" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $value := (index $parts 1) | trim -}}
    {{- $labelValue := index $labels $key | default "" -}}
    {{- if eq $labelValue $value -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else if contains "=" $condition -}}
    {{- /* Handle "key=value" */ -}}
    {{- $parts := splitList "=" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $value := (index $parts 1) | trim -}}
    {{- $labelValue := index $labels $key | default "" -}}
    {{- if ne $labelValue $value -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else -}}
    {{- /* Handle "key" (existence check) */ -}}
    {{- $key := $condition | trim -}}
    {{- if not (hasKey $labels $key) -}}
      {{- $match = false -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- $match -}}
{{- end -}}

{{- /* Helper function to check annotation selector matching */ -}}
{{- define "hlmfk-1-2.matchesAnnotationSelector" -}}
{{- $annotations := .annotations -}}
{{- $selector := .selector -}}
{{- $match := true -}}

{{- /* Parse selector: "key1=value1,key2 in (value2,value3),key4!=value4,key5" */ -}}
{{- $conditions := splitList "," $selector -}}
{{- range $conditions -}}
  {{- $condition := . | trim -}}
  {{- if contains " in (" $condition -}}
    {{- /* Handle "key in (value1,value2)" */ -}}
    {{- $parts := splitList " in (" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $valuesPart := (index $parts 1) | trimSuffix ")" -}}
    {{- $values := splitList "," $valuesPart -}}
    {{- $annotationValue := index $annotations $key | default "" -}}
    {{- $found := false -}}
    {{- range $values -}}
      {{- $value := . | trim -}}
      {{- if eq $annotationValue $value -}}
        {{- $found = true -}}
      {{- end -}}
    {{- end -}}
    {{- if not $found -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else if contains " notin (" $condition -}}
    {{- /* Handle "key notin (value1,value2)" */ -}}
    {{- $parts := splitList " notin (" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $valuesPart := (index $parts 1) | trimSuffix ")" -}}
    {{- $values := splitList "," $valuesPart -}}
    {{- $annotationValue := index $annotations $key | default "" -}}
    {{- $found := false -}}
    {{- range $values -}}
      {{- $value := . | trim -}}
      {{- if eq $annotationValue $value -}}
        {{- $found = true -}}
      {{- end -}}
    {{- end -}}
    {{- if $found -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else if contains "!=" $condition -}}
    {{- /* Handle "key!=value" */ -}}
    {{- $parts := splitList "!=" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $value := (index $parts 1) | trim -}}
    {{- $annotationValue := index $annotations $key | default "" -}}
    {{- if eq $annotationValue $value -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else if contains "=" $condition -}}
    {{- /* Handle "key=value" */ -}}
    {{- $parts := splitList "=" $condition -}}
    {{- $key := (index $parts 0) | trim -}}
    {{- $value := (index $parts 1) | trim -}}
    {{- $annotationValue := index $annotations $key | default "" -}}
    {{- if ne $annotationValue $value -}}
      {{- $match = false -}}
    {{- end -}}
  {{- else -}}
    {{- /* Handle "key" (existence check) */ -}}
    {{- $key := $condition | trim -}}
    {{- if not (hasKey $annotations $key) -}}
      {{- $match = false -}}
    {{- end -}}
  {{- end -}}
{{- end -}}

{{- $match -}}
{{- end -}}

{{- define "hlmfk-1-2.applyTargetedPatches" -}}
{{- $resources := .resources -}}
{{- $patches := .patches -}}
{{- range $patches -}}
  {{- $target := .target -}}
  {{- $ops := .ops -}}
  {{- range $resources -}}
    {{- $resource := . -}}
    {{- /* Check if this resource matches the target using enhanced matching */ -}}
    {{- $matches := include "hlmfk-1-2.matchesTarget" (dict "resource" $resource "target" $target) -}}
    {{- if eq (trim $matches) "true" -}}
      {{- /* Apply operations to this resource */ -}}
      {{- include "hlmfk-1-2.applyPatches" (dict "object" $resource "patches" $ops) -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
{{- end -}}

{{- define "hlmfk-1-2.applyManifestPatchers" -}}
{{- $manifest := .manifest -}}
{{- $globals := .globals -}}
{{- if $globals.patches -}}
  {{- $patches := $globals.patches -}}
  {{- $resource := $manifest.spec -}}
  
  {{- /* Check each patch to see if it matches this manifest */ -}}
  {{- range $patches -}}
    {{- $target := .target -}}
    {{- $ops := .ops -}}
    {{- /* Check if target matches using enhanced matching */ -}}
    {{- $matches := include "hlmfk-1-2.matchesTarget" (dict "resource" $resource "target" $target) -}}
    {{- if eq (trim $matches) "true" -}}
      {{- /* Apply operations to this resource */ -}}
      {{- include "hlmfk-1-2.applyPatches" (dict "object" $resource "patches" $ops) -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
{{- end -}}